Patrick Sherbondy

---------------------------------------------------
Tiny PL/0 Compiler / Parser - Code Generator README
---------------------------------------------------

This read me file will detail the components of the tiny PL/0 Compiler and instruct you on how to
compile and run the compiler.

---------------------------------------------------
									File Components
---------------------------------------------------
The following files are included inside the zipped
"parser-code-generator" file:

+ compiler.h 							: Header file containing various structs and definitions.
+ main.c 									: Directs all parts of the compiler.
+ lexical-analyzer.c 			: Analyzes the input file and creates a token stream for the parser.
+ parser-code-generator.c : Analyzes the token stream and ensures it follows the PL/0 grammar.
+ virtual-machine.c 			: Takes in machine code from the code generator and executes the input code.
+ sample-output.txt 			: Contains a sample input program and its resulting output.
+ sample-errors.txt 			: Contains all errors handled by this compiler.
+ README.txt 							: The file you're reading right now!

---------------------------------------------------
				Running and Compiling the Compiler
---------------------------------------------------
1. Open a Linux-based command prompt terminal, such as Ubuntu or use the UCF Eustis test server.

2. Navigate to the parser-code-generator file within your computer. Ensure that the file is unzipped!
		a. Use the "cd" command to change directories until you locate the file.

3. Create an input .txt file. Name it anything you like, but ensure you remember the name of the file, and
	 that the file is placed within the same directory as all the other source code files. It is easiest
	 if you leave everything in the parser-code-generator file, and include your input file there.
	 The input file should be comprised of code that follows the PL/0 grammar.

4. To compile the compiler, type the following command in the terminal:
	 gcc main.c lexical-analyzer.c parser-code-generator.c virtual-machine.c -o compile
	 and press enter.

5. To run the program, type the following command in the terminal:
	 ./compile <your input file name> <compiler directives>
	 You MUST include the file extension of your input file name, i.e. .txt
	 See the section below for a list of valid compiler directives.
	 Press enter when finished typing the command.

6. Depending on your compiler directives, the screen will either print something or nothing. If you
 	 choose the "-a" compiler directive, the screen will tell you whether your program has no errors.
	 The screen will ALWAYS alert you of errors, however, regardless of directives. Furthermore, any
	 output created by your code will appear between the outputs created by the "-a" and "-v" directives.

7. If the screen is blank but seems to be waiting for a prompt, then your program likely included
	 "read", and you should simply input any desired integers to get the program moving.

8. If there is an error in your source code, this program will halt at the first error it finds
	 and print the error to the screen.

---------------------------------------------------
						Valid Compiler Directives
---------------------------------------------------
-l : Prints the internal and symbolic token streams to the screen made by the lexical analyzer.
-a : Prints the raw assembly code generated by the code generator. States whether code is free from error.
-v : Prints the virtual machine's execution trace.

Note that the compiler directives must come after the input file name. You can input the compiler
directives in any order you wish after stating the input file name, however.
